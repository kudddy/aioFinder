import html2text
from datetime import datetime
from message_schema import Updater
from plugins.systems import Systems
from plugins.config import cfg
from plugins.helper import send_message, edit_message
from plugins.pg.query import generate_search_query
from plugins.pg.tables import user_enter


async def hello_message(m: Updater,
                        systems: Systems):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∞–≤—ã–∫
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """

    chat_id = m.get_chat_id()
    user_id = m.get_user_id()

    await systems.local_cache.clean(chat_id)

    text = "üí• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —Ä–∞–±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫‚ùó"
    inline_keyboard = [
        [
            {
                "text": "JavaScript",
                "callback_data": "JavaScript"
            },
            {
                "text": "Python",
                "callback_data": "Python"

            },
        ],
        [
            {
                "text": "Java, Scala",
                "callback_data": "Java, Scala"
            },
            {
                "text": "C/C++, Assembler",
                "callback_data": "C/C++, Assembler"
            }
        ],
        [
            {
                "text": "PHP",
                "callback_data": "PHP"
            },
            {
                "text": ".NET",
                "callback_data": ".NET"
            },
            {
                "text": "QA",
                "callback_data": "QA"
            }
        ],
        [
            {
                "text": "DevOps",
                "callback_data": "DevOps"
            },
            {
                "text": "IOS",
                "callback_data": "IOS"
            },
            {
                "text": "Golang",
                "callback_data": "Golang"
            }
        ],
        [
            {
                "text": "Data Science",
                "callback_data": "DS, Data Science"
            },
            {
                "text": "Security",
                "callback_data": "Security, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
            },
        ],
        [
            {
                "text": "Analyst",
                "callback_data": "Analyst"
            },
            {
                "text": "Manager",
                "callback_data": "Manager"
            }
        ]

    ]
    await send_message(cfg.app.hosts.tlg.send_message,
                       chat_id,
                       text,
                       inline_keyboard=inline_keyboard)

    query = user_enter.insert().values(
        user_id=user_id,
        chat_id=chat_id,
        date=datetime.now()
    )

    await systems.pg.fetch(query)

    return 1


async def analyze_text_and_give_vacancy(m: Updater,
                                        systems: Systems):
    """
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º, –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É –∏ –¥—Ä)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    chat_id = m.get_chat_id()
    message_id = m.get_message_id()
    user_id = m.get_user_id()
    text = m.get_text()
    # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–±–∏–ª –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞
    # TODO –æ–ø–µ—Ä–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
    if await systems.local_cache.check(chat_id):
        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π
        if text == "–°–ª–µ–¥—É—é—â–∞—è":
            # TODO –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á—Ç–æ–±—ã –±—ã–ª–æ –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ —á—Ç–æ –º—ã –≤—ã—Ç–∞—Å–∫–≤–∞–µ–º –∏–Ω—Ñ–æ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
            await systems.local_cache.next_step(chat_id)

            most_sim_vacancy_content = await systems.local_cache.give_cache(chat_id)
            if most_sim_vacancy_content:

                # TODO –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

                # todo —Å–¥–µ–ª–∞—Ç—å –¥–∞—Ç–∞–∫–ª–∞—Å—Å

                url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

                inline_keyboard = [
                    [
                        {
                            "text": "–°–ª–µ–¥—É—é—â–∞—è",
                            "callback_data": "–°–ª–µ–¥—É—é—â–∞—è"
                        },
                        {
                            "text": "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            "callback_data": "–í –Ω–∞—á–∞–ª–æ"

                        },
                    ],
                    [
                        {
                            "text": "–û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∫–ª–∏–∫",
                            "url": url,
                            "callback_data": ""
                        }
                    ]
                ]
                # todo –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏–∑ html –≤ text –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É

                title: str = "üí• –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: " + most_sim_vacancy_content['title'] + '\n'
                txt: str = title + "üí• –û–ø–∏—Å–∞–Ω–∏–µ: " + html2text.html2text(most_sim_vacancy_content['header'])[
                                                      :4000] + '\n'
                txt: str = txt + '\n' "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ‚ùì"

                await edit_message(url=cfg.app.hosts.tlg.edit_message,
                                   text=txt,
                                   message_id=message_id,
                                   chat_id=chat_id,
                                   inline_keyboard=inline_keyboard)

                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∏–Ω—Ñ–æ –ø–æ –ø–æ–≤–æ–¥—É –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–∏

                return 1
            else:
                text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç‚ùóÔ∏è'
                await send_message(cfg.app.hosts.tlg.send_message,
                                   chat_id,
                                   text,
                                   remove_keyboard=True)
                return 0
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        elif text == "–í–Ω–∞—á–∞–ª–æ":
            await hello_message(m, systems)
            return 1
        # –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        else:
            text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               remove_keyboard=True)
            return 0

    else:

        list_of_tokens: list = systems.tokenizer.clean_query(text)
        query = generate_search_query(list_of_tokens)

        ready_content = []
        # columns = ["id", "title", "footer", "header",
        #            "requirements", "duties", "conditions",
        #            "date", "locality", "region", "company"]
        # TODO –≥—Ä—è–∑–Ω—ã–π –±–∞–≥ —Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –∫—ç—à–µ
        columns = ["id", "title", "header"]
        for row in await systems.pg.fetch(query):
            reconstruction: dict = {v: str(row[v]) for v in columns}
            ready_content.append(reconstruction)
        step = 0
        await systems.local_cache.caching(chat_id,
                                          step=step,
                                          arr=ready_content)
        # –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(ready_content) > 0:

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(ready_content[step]["id"])

            inline_keyboard = [
                [
                    {
                        "text": "–õ–∞–π–∫",
                        "callback_data": "–õ–∞–π–∫"
                    },
                    {
                        "text": "–î–∏–∑–ª–∞–π–∫",
                        "callback_data": "–î–∏–∑–ª–∞–π–∫"

                    }
                ],
                [
                    {
                        "text": "–û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∫–ª–∏–∫",
                        "url": url,
                        "callback_data": ""
                    }
                ],
                [
                    {
                        "text": "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        "callback_data": "–í–Ω–∞—á–∞–ª–æ"
                    }
                ]

            ]
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            title: str = "üí• –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: " + ready_content[step]['title'] + '\n'
            text: str = title + "üí• –û–ø–∏—Å–∞–Ω–∏–µ: " + html2text.html2text(ready_content[step]['header'])[:4000] + '\n'
            text: str = text + '\n' "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ‚ùì"

            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               inline_keyboard=inline_keyboard)
            return 1
        else:
            text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞–∫–∞–Ω—Å–∏–∏:(Ô∏è'
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               remove_keyboard=True)
            return 0


async def goodbye_message(m: Updater):
    text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
    await send_message(cfg.app.hosts.tlg.send_message,
                       m.get_chat_id(),
                       text,
                       remove_keyboard=True)
    return 0
