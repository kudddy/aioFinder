from sqlalchemy import select, func, desc

from message_schema import Updater
from plugins.systems import Systems
from plugins.config import cfg
from plugins.helper import send_message
from plugins.helper import remove_html_in_dict
from plugins.pg.tables import index_map, cache_index, vacancy_content


# TODO —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∞—Å—Å —Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏ –≤ –±–∞–∑–µ –∏ –∫—ç—à—É
async def hello_message(m: Updater,
                        systems: Systems):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∞–≤—ã–∫
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    if m.message:
        await systems.local_cache.clean(m.message.chat.id)
    else:
        await systems.local_cache.clean(m.callback_query.message.chat.id)

    text = "üí• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —Ä–∞–±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫‚ùó"
    await send_message(cfg.app.hosts.tlg.host,
                       m.message.chat.id,
                       text,
                       remove_keyboard=True)
    return 1


async def analyze_text_and_give_vacancy(m: Updater,
                                        systems: Systems):
    """
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    if m.message.text != '–ù–µ—Ç':
        if await systems.local_cache.check(m.message.chat.id):
            # TODO –ø–æ–¥—É–º–∞—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —Ç–∞–∫ —Ä–∞–Ω–æ
            await systems.local_cache.next_step(m.message.chat.id)
        else:
            # –≤–æ–∑–≤—Ä–∞—â–∞—Ç id –≤–∞–∫–∞–Ω—Å–∏–∏
            # –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã–π
            times = select([index_map.c.original_index]).\
                where(index_map.c.extended_index == m.message.text).\
                alias("times")

            j = times.join(cache_index, times.c.original_index == cache_index.c.original_index)

            search_result = select([cache_index.c.vacancy_id, func.count(cache_index.c.vacancy_id).label('counter')]). \
                select_from(j). \
                group_by(cache_index.c.vacancy_id).\
                order_by(desc('counter')).\
                alias("search_result")

            j = search_result.join(vacancy_content, search_result.c.vacancy_id == vacancy_content.c.id)

            query = select([search_result, vacancy_content]).select_from(j).order_by(
                desc(search_result.c.counter)).limit(5)

            ready_content = []
            columns = ["id", "title", "footer", "header",
                       "requirements", "duties", "conditions",
                       "date", "locality", "region", "company"]
            for row in await systems.pg.fetch(query):
                reconstruction: dict = {v: str(row[v]) for v in columns}
                ready_content.append(reconstruction)
            step = 0
            await systems.local_cache.caching(m.message.chat.id,
                                              step=step,
                                              arr=ready_content)
        most_sim_vacancy_content = await systems.local_cache.give_cache(m.message.chat.id)
        if most_sim_vacancy_content:
            title: str = "üí• –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: " + most_sim_vacancy_content['title'] + '\n'
            text: str = title + "üí• –û–ø–∏—Å–∞–Ω–∏–µ: " + most_sim_vacancy_content['header'] + '\n' + \
                        cfg.app.hosts.sbervacan—Åy.host.format(str(most_sim_vacancy_content['id']))
            text: str = text + '\n' "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ‚ùì"
            await send_message(cfg.app.hosts.tlg.host, m.message.chat.id,
                               remove_html_in_dict(text)[:4095],
                               buttons=['–î–∞', '–ù–µ—Ç'],
                               one_time_keyboard=False)
            return 1
        else:
            text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç‚ùóÔ∏è'
            await send_message(cfg.app.hosts.tlg.host,
                               m.message.chat.id,
                               text,
                               remove_keyboard=True)
            return 0

    else:
        text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
        await send_message(cfg.app.hosts.tlg.host,
                           m.message.chat.id,
                           text,
                           remove_keyboard=True)
        return 0


async def goodbye_message(m: Updater):
    text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
    await send_message(cfg.app.hosts.tlg.host,
                       m.message.chat.id,
                       text,
                       remove_keyboard=True)
    return 0
