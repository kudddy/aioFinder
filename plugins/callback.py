import logging
from datetime import datetime

from message_schema import Updater
from plugins.systems import Systems
from plugins.config import cfg
from plugins.helper import send_message, edit_message, generate_message_body, generate_auth_message
from plugins.pg.query import generate_search_query, sorting_by_viewed_vacancies, main_search_query, \
    give_me_likes_vacancy
from plugins.pg.tables import user_enter, likes_info, viewed_vacancy
from plugins.keybords import inline_keyboard_for_hello, \
    generate_pagination_keyboard, generate_check_box_keyboard, \
    generate_emo_keyboard, generate_check_box_for_clean, generate_keyboard_for_likes

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger(__name__)

log.setLevel(logging.DEBUG)


async def hello_message(m: Updater,
                        systems: Systems):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∞–≤—ã–∫
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """

    chat_id = m.get_chat_id()
    user_id = m.get_user_id()
    username = m.get_username()

    await systems.local_cache.clean(chat_id)

    text = "üí• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —Ä–∞–±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫‚ùó"

    await send_message(cfg.app.hosts.tlg.send_message,
                       chat_id,
                       text,
                       inline_keyboard=inline_keyboard_for_hello)

    query = user_enter.insert().values(
        user_id=user_id,
        chat_id=chat_id,
        username=username,
        date=datetime.now()
    )

    await systems.pg.fetch(query)

    return 1


async def analyze_text_and_give_vacancy(m: Updater,
                                        systems: Systems):
    """
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º, –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É –∏ –¥—Ä)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    user_id = m.get_user_id()
    chat_id = m.get_chat_id()
    message_id = m.get_message_id()
    text = m.get_text()
    extend_profile: bool = False
    # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–±–∏–ª –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞
    # TODO –æ–ø–µ—Ä–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
    if await systems.local_cache.check(chat_id):
        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π
        if text == "–°–ª–µ–¥—É—é—â–∞—è":

            # TODO –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á—Ç–æ–±—ã –±—ã–ª–æ –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ —á—Ç–æ –º—ã –≤—ã—Ç–∞—Å–∫–≤–∞–µ–º –∏–Ω—Ñ–æ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
            await systems.local_cache.next_step(chat_id)

            most_sim_vacancy_content, is_likes_display, _ = await systems.local_cache.give_cache(chat_id)

            if most_sim_vacancy_content:

                # TODO –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

                # todo —Å–¥–µ–ª–∞—Ç—å –¥–∞—Ç–∞–∫–ª–∞—Å—Å

                url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

                # todo –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏–∑ html –≤ text –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É

                message_body: str = generate_message_body(most_sim_vacancy_content)

                # –û—Ç–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                # TODO –Ω—É–∂–Ω–æ –æ—Ä–≥–∞–∏–∑–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã

                log.debug("user_id id_test - {}".format(user_id))
                log.debug("user_id type - {}".format(type(user_id)))

                if user_id in (81432612, "81432612"):
                    extend_profile = True

                await edit_message(url=cfg.app.hosts.tlg.edit_message,
                                   text=message_body,
                                   message_id=message_id,
                                   chat_id=chat_id,
                                   inline_keyboard=generate_pagination_keyboard(url, extend_profile))

                # –ü–∏—à–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                query = viewed_vacancy.insert().values(
                    user_id=m.get_user_id(),
                    chat_id=chat_id,
                    date=datetime.now(),
                    vacancy_id=int(most_sim_vacancy_content["id"])
                )

                await systems.pg.fetch(query)

                return 1
            else:
                text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç‚ùóÔ∏è'
                await send_message(cfg.app.hosts.tlg.send_message,
                                   chat_id,
                                   text,
                                   remove_keyboard=True)
                return 0
        elif text == "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":

            most_sim_vacancy_content, _, cache = await systems.local_cache.give_cache(chat_id)

            reveal_text = cache["click_to_reveal"]

            if reveal_text:
                message_body: str = generate_message_body(most_sim_vacancy_content, message_size=4000)
            else:
                message_body: str = generate_message_body(most_sim_vacancy_content)

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

            # todo –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏–∑ html –≤ text –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É

            await edit_message(url=cfg.app.hosts.tlg.edit_message,
                               text=message_body,
                               message_id=message_id,
                               chat_id=chat_id,
                               inline_keyboard=generate_check_box_keyboard(url,
                                                                           reveal_text,
                                                                           extend_profile))

            query = likes_info.insert().values(
                user_id=m.get_user_id(),
                chat_id=chat_id,
                date=datetime.now(),
                vacancy_id=int(most_sim_vacancy_content["id"])
            )

            await systems.pg.fetch(query)

            return 1
        elif text == "–û—á–∏—Å—Ç–∏—Ç—å":
            query = viewed_vacancy.delete().where(viewed_vacancy.c.chat_id == chat_id)

            await systems.pg.fetch(query)

            most_sim_vacancy_content, _, cache = await systems.local_cache.give_cache(chat_id)

            reveal_text = cache["click_to_reveal"]

            if reveal_text:
                message_body: str = generate_message_body(most_sim_vacancy_content, message_size=4000)
            else:
                message_body: str = generate_message_body(most_sim_vacancy_content)

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

            await edit_message(url=cfg.app.hosts.tlg.edit_message,
                               text=message_body,
                               message_id=message_id,
                               chat_id=chat_id,
                               inline_keyboard=generate_check_box_for_clean(url,
                                                                            reveal_text,
                                                                            extend_profile))

            return 1

        elif text == "–û—á–∏—Å—Ç–∏–ª":
            # –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

            most_sim_vacancy_content, _, cache = await systems.local_cache.give_cache(chat_id)

            reveal_text = cache["click_to_reveal"]

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

            if reveal_text:
                message_body: str = generate_message_body(most_sim_vacancy_content, message_size=4000)
            else:
                message_body: str = generate_message_body(most_sim_vacancy_content)

            await edit_message(url=cfg.app.hosts.tlg.edit_message,
                               text=message_body,
                               message_id=message_id,
                               chat_id=chat_id,
                               inline_keyboard=generate_check_box_for_clean(url,
                                                                            extend_profile=extend_profile,
                                                                            reveal_text=reveal_text,
                                                                            double_click=True
                                                                            ))
            return 1

        elif text == "–î–æ–±–∞–≤–∏–ª":
            most_sim_vacancy_content, _, cache = await systems.local_cache.give_cache(chat_id)
            reveal_text = cache["click_to_reveal"]

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

            if reveal_text:
                message_body: str = generate_message_body(most_sim_vacancy_content, message_size=4000)
            else:
                message_body: str = generate_message_body(most_sim_vacancy_content)

            await edit_message(url=cfg.app.hosts.tlg.edit_message,
                               text=message_body,
                               message_id=message_id,
                               chat_id=chat_id,
                               inline_keyboard=generate_emo_keyboard(url,
                                                                     reveal_text=reveal_text,
                                                                     extend_profile=extend_profile))

            return 1

        elif text == "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
            query = give_me_likes_vacancy(chat_id)
            ready_content = []
            columns = ["id", "title", "header"]
            for row in await systems.pg.fetch(query):
                reconstruction: dict = {v: str(row[v]) for v in columns}
                ready_content.append(reconstruction)
            step = 0
            await systems.local_cache.caching(chat_id,
                                              step=step,
                                              is_likes_display=True,
                                              arr=ready_content)

            message_body = generate_message_body(ready_content[step])

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(ready_content[step]["id"])

            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               message_body,
                               inline_keyboard=generate_keyboard_for_likes(url, extend_profile))

            return 1

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
        elif text == "–í –Ω–∞—á–∞–ª–æ":
            await hello_message(m, systems)
            return 1
        elif text == "–†–∞—Å–∫—Ä—ã—Ç—å":
            most_sim_vacancy_content, _, cache = await systems.local_cache.give_cache(chat_id)

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

            message_body: str = generate_message_body(most_sim_vacancy_content, message_size=4000)
            is_likes_display = cache['is_likes_display']
            if is_likes_display:
                keyboard = generate_keyboard_for_likes(url,
                                                       reveal_text=False,
                                                       extend_profile=extend_profile)
            else:
                keyboard = generate_pagination_keyboard(url,
                                                        reveal_text=False,
                                                        extend_profile=extend_profile)

            await edit_message(url=cfg.app.hosts.tlg.edit_message,
                               text=message_body,
                               message_id=message_id,
                               chat_id=chat_id,
                               inline_keyboard=keyboard)

            # –ø–∏—à–µ–º –≤ –∫—ç—à —Ñ–ª–∞–≥, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞—Å–∫—Ä—ã—Ç–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏
            await systems.local_cache.caching(chat_id,
                                              step=cache['cache_iter'][0],
                                              is_likes_display=is_likes_display,
                                              click_to_reveal=True,
                                              arr=cache["cache_vacancy_result"])

            return 1
        elif text == "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π":
            most_sim_vacancy_content, _, cache = await systems.local_cache.give_cache(chat_id)

            url_sf = cfg.app.hosts.sf.host.format(most_sim_vacancy_content["id"])
            message_body = await generate_auth_message(url=url_sf, vacancy_id=most_sim_vacancy_content["id"])

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(most_sim_vacancy_content["id"])

            await edit_message(url=cfg.app.hosts.tlg.edit_message,
                               text=message_body,
                               message_id=message_id,
                               chat_id=chat_id,
                               inline_keyboard=generate_pagination_keyboard(url,
                                                                            reveal_text=True,
                                                                            extend_profile=extend_profile))
            return 1


        else:
            text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               remove_keyboard=True)
            return 0

    else:

        list_of_tokens: list = systems.tokenizer.clean_query(text)
        query = main_search_query(list_of_tokens)

        query = sorting_by_viewed_vacancies(query)

        ready_content = []
        # columns = ["id", "title", "footer", "header",
        #            "requirements", "duties", "conditions",
        #            "date", "locality", "region", "company"]
        # TODO –≥—Ä—è–∑–Ω—ã–π –±–∞–≥ —Ñ–∏–∫—Å, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –∫—ç—à–µ
        columns = ["id", "title", "header"]
        for row in await systems.pg.fetch(query):
            reconstruction: dict = {v: str(row[v]) for v in columns}
            ready_content.append(reconstruction)
        step = 0
        await systems.local_cache.caching(chat_id,
                                          step=step,
                                          is_likes_display=False,
                                          arr=ready_content)
        # –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(ready_content) > 0:

            url: str = cfg.app.hosts.sbervacan—Åy.host.format(ready_content[step]["id"])

            message_body = generate_message_body(ready_content[step])

            if user_id in (81432612, "81432612"):
                extend_profile = True

            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               message_body,
                               inline_keyboard=generate_pagination_keyboard(url,
                                                                            extend_profile=extend_profile))

            # –ü–∏—à–µ–º —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            query = viewed_vacancy.insert().values(
                user_id=m.get_user_id(),
                chat_id=chat_id,
                date=datetime.now(),
                vacancy_id=int(ready_content[step]["id"])
            )

            await systems.pg.fetch(query)
            return 1
        else:
            text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞–∫–∞–Ω—Å–∏–∏:(Ô∏è'
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               remove_keyboard=True)
            return 0


async def goodbye_message(m: Updater):
    text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
    await send_message(cfg.app.hosts.tlg.send_message,
                       m.get_chat_id(),
                       text,
                       remove_keyboard=True)
    return 0
