import html2text

from message_schema import Updater
from plugins.systems import Systems
from plugins.config import cfg
from plugins.helper import send_message, edit_message
from plugins.pg.query import generate_search_query


# TODO —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∫–ª–∞—Å—Å —Å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏ –≤ –±–∞–∑–µ –∏ –∫—ç—à—É
async def hello_message(m: Updater,
                        systems: Systems):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∞–≤—ã–∫
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    if m.message:
        await systems.local_cache.clean(m.message.chat.id)
    else:
        await systems.local_cache.clean(m.callback_query.message.chat.id)

    text = "üí• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —Ä–∞–±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫‚ùó"
    await send_message(cfg.app.hosts.tlg.send_message,
                       m.message.chat.id,
                       text,
                       remove_keyboard=True)
    return 1


async def analyze_text_and_give_vacancy(m: Updater,
                                        systems: Systems):
    """
    :param systems: –û–±—ä–µ–∫—Ç —Å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏(–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–∞–º –∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É)
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    # –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º chat_id
    if m.message:
        chat_id = m.message.chat.id
        message_id = m.message.message_id
        text = m.message.text
    elif m.callback_query:
        chat_id = m.callback_query.message.chat.id
        message_id = m.callback_query.message.message_id
        text = m.callback_query.message.text
    else:
        chat_id = None
        message_id = None
        text = None
        # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–±–∏–ª –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞

    if await systems.local_cache.check(chat_id):

        if text == "–î–∞":
            await systems.local_cache.next_step(chat_id)

            most_sim_vacancy_content = await systems.local_cache.give_cache(chat_id)
            if most_sim_vacancy_content:

                # TODO –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

                # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                inline_buttons = ['–î–∞', '–ù–µ—Ç']
                # todo —Å–¥–µ–ª–∞—Ç—å –¥–∞—Ç–∞–∫–ª–∞—Å—Å
                # inline_keyboard = [[{"text": text, "callback_data": "A1"} for text in inline_buttons]]
                inline_keyboard = [
                    [
                        {
                            "text": "–î–∞",
                            "callback_data": "–î–∞"
                        },
                        {
                            "text": "–ù–µ—Ç",
                            "callback_data": "–ù–µ—Ç"

                        }
                    ]
                ]
                # todo –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å –∏–∑ html –≤ text –Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
                await send_message(cfg.app.hosts.tlg.send_message,
                                   chat_id,
                                   html2text.html2text(most_sim_vacancy_content['header']),
                                   inline_keyboard=inline_keyboard)

                await edit_message(url=cfg.app.hosts.tlg.edit_message,
                                   text=html2text.html2text(most_sim_vacancy_content['header']),
                                   message_id=message_id,
                                   chat_id=chat_id,
                                   inline_keyboard=inline_keyboard)

                return 1
            else:
                text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç‚ùóÔ∏è'
                await send_message(cfg.app.hosts.tlg.send_message,
                                   chat_id,
                                   text,
                                   remove_keyboard=True)
                return 0
        else:
            text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               remove_keyboard=True)
            return 0

    else:
        # –≤–æ–∑–≤—Ä–∞—â–∞—Ç id –≤–∞–∫–∞–Ω—Å–∏–∏
        # –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã–π
        # TODO –Ω–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏

        query = generate_search_query(text=text)

        ready_content = []
        columns = ["id", "title", "footer", "header",
                   "requirements", "duties", "conditions",
                   "date", "locality", "region", "company"]
        for row in await systems.pg.fetch(query):
            reconstruction: dict = {v: str(row[v]) for v in columns}
            ready_content.append(reconstruction)
        step = 0
        await systems.local_cache.caching(chat_id,
                                          step=step,
                                          arr=ready_content)
        # –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(ready_content) > 0:
            inline_buttons = ['–î–∞', '–ù–µ—Ç']
            inline_keyboard = [[{"text": text, "callback_data": "A1"} for text in inline_buttons]]
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               html2text.html2text(ready_content[step]['header']),
                               inline_keyboard=inline_keyboard)
            return 1
        else:
            text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞–∫–∞–Ω—Å–∏–∏:(Ô∏è'
            await send_message(cfg.app.hosts.tlg.send_message,
                               chat_id,
                               text,
                               remove_keyboard=True)
            return 0


async def goodbye_message(m: Updater):
    text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
    await send_message(cfg.app.hosts.tlg.send_message,
                       m.message.chat.id,
                       text,
                       remove_keyboard=True)
    return 0
