from message_schema import Updater
from plugins.statemachine import LocalCacheForCallbackFunc
from plugins.config import cfg
from plugins.helper import send_message
from plugins.helper import remove_html_in_dict

# from plugins.cache import mc

# # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
# vacs = GetVac(vacs_filename=vacs_filename)
# # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
# search = InversIndexSearch(url=url_fasttext, token=token_fastext)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å —Å –∫—ç—à–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–ª–±—ç–∫ —Ñ-—Ü–∏–π
cache = LocalCacheForCallbackFunc()


async def hello_message(m: Updater):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∞–≤—ã–∫
    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    if m.message:
        await cache.clean(m.message.chat.id)
    else:
        await cache.clean(m.callback_query.message.chat.id)

    # –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞
    # key = mc.get("key_for_update_{}".format(str(unique_quid_app)))
    # if key is None:
    #     search.cache_index = pcl.get_pickle_file(index_filename)
    #     vacs.vacs = pcl.get_pickle_file(vacs_filename)
    #     mc.set("key_for_update_{}".format(str(unique_quid_app)), "True", time=time_for_update_index)

    text = "üí• –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è —Ä–∞–±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞‚ùó"
    await send_message(cfg.app.hosts.tlg.host,
                       m.message.chat.id,
                       text,
                       remove_keyboard=True)
    return 1


async def analyze_text_and_give_vacancy(m: Updater):
    """

    :param m: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: –∫–ª—é—á –∫–æ–ª–±—ç–∫ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å
    """
    if m.message.text != '–ù–µ—Ç':
        if await cache.check(m.message.chat.id):
            await cache.next_step(m.message.chat.id)
        else:
            # –≤–æ–∑–≤—Ä–∞—â–∞—Ç id –≤–∞–∫–∞–Ω—Å–∏–∏
            # result: list = search.search(m.message.text)
            result: list = [123, 456, 789]
            step = 0
            await cache.caching(m.message.chat.id, step=step, arr=result)
        vac_id = await cache.give_cache(m.message.chat.id)
        get_vac_by_id: dict = {
            123: {
                'content': {
                    'title': '–ü–∏–∑–¥—é–∫ –∏–≤–∞–Ω—ã—á',
                    'header': '–í –∑–∞–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Ö–æ–¥–∏—Ç –µ–±–∞—Ç—å –º–æ–∑–≥–∏'
                }
            },
            456: {
                'content': {
                    'title': '–ü–∏–∑–¥—é–∫ –∏–≤–∞–Ω—ã—á',
                    'header': '–í –∑–∞–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Ö–æ–¥–∏—Ç –µ–±–∞—Ç—å –º–æ–∑–≥–∏'
                }
            },
            789: {
                'content': {
                    'title': '–ü–∏–∑–¥—é–∫ –∏–≤–∞–Ω—ã—á',
                    'header': '–í –∑–∞–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—Ö–æ–¥–∏—Ç –µ–±–∞—Ç—å –º–æ–∑–≥–∏'
                }
            }
        }
        vacancy_info = get_vac_by_id.get(vac_id, False)
        # vacancy_info: dict = vacs.get_vac_by_id(vac_id)
        if vacancy_info:
            title: str = "üí• –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: " + vacancy_info['content']['title'] + '\n'
            text: str = title + "üí• –û–ø–∏—Å–∞–Ω–∏–µ: " + vacancy_info['content']['header'] + '\n' + \
                        cfg.app.hosts.sbervacan—Åy.host.format(str(vac_id))
            text: str = text + '\n' "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ‚ùì"
            await send_message(cfg.app.hosts.tlg.host, m.message.chat.id,
                               remove_html_in_dict(text)[:4095],
                               buttons=['–î–∞', '–ù–µ—Ç'],
                               one_time_keyboard=False)
            return 1
        else:
            text = 'ü§ì –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç‚ùóÔ∏è'
            await send_message(cfg.app.hosts.tlg.host,
                               m.message.chat.id,
                               text,
                               remove_keyboard=True)
            return 0

    else:
        text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
        await send_message(cfg.app.hosts.tlg.host,
                           m.message.chat.id,
                           text,
                           remove_keyboard=True)
        return 0


async def goodbye_message(m: Updater):
    text = 'üí• –ü–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—â–µ‚ùóÔ∏è'
    await send_message(cfg.app.hosts.tlg.host,
                       m.message.chat.id,
                       text,
                       remove_keyboard=True)
    return 0
