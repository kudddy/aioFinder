from random import choice

emoticons = ['üî•', '‚ù§', 'Ô∏èü§°', 'ü§Æ', 'üíã', 'üëÖ', 'üëÄ', 'üêí', 'üçí', 'ü•ü', 'üç§']


def back_to_selection():
    return {

        "text": "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É",

        "callback_data": "–í –Ω–∞—á–∞–ª–æ"

    }


def next_item():
    return {

        "text": "–°–ª–µ–¥—É—é—â–∞—è",

        "callback_data": "–°–ª–µ–¥—É—é—â–∞—è"

    }


def to_favor():
    return {

        "text": "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",

        "callback_data": "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"

    }


def show_favor():
    return {

        "text": "–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ",

        "callback_data": "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
    }


def clean_history():
    return {

        "text": "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",

        "callback_data": "–û—á–∏—Å—Ç–∏—Ç—å"
    }


def add_item(double_click: bool = False):
    if double_click:

        return {

            "text": choice(emoticons),

            "callback_data": "–î–æ–±–∞–≤–∏–ª"

        }

    else:

        return {

            "text": "–î–æ–±–∞–≤–∏–ª üëç",

            "callback_data": "–î–æ–±–∞–≤–∏–ª"

        }


def desk_and_response(url: str):
    return {
        "text": "–û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∫–ª–∏–∫",
        "url": url,
        "callback_data": ""
    }


def double_click_to_add_item():
    return {

        "text": choice(emoticons),

        "callback_data": "–î–æ–±–∞–≤–∏–ª"

    }


def click_to_clean_items(double_click: bool):
    if double_click:
        return {
            "text": choice(emoticons),
            "callback_data": "–û—á–∏—Å—Ç–∏–ª"
        }
    else:
        return {
            "text": "–û—á–∏—Å—Ç–∏–ª üëç",
            "callback_data": "–û—á–∏—Å—Ç–∏–ª"
        }


def get_reveal_button(url: str, extend_profile: bool):
    if extend_profile:
        return [
            {

                "text": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∫–ª–∏–∫",

                "callback_data": "",

                "url": url,

            },
            {

                "text": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",

                "callback_data": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"

            }

        ]
    else:
        return [
            {

                "text": "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ç–∫–ª–∏–∫",

                "callback_data": "",

                "url": url,

            }
        ]


inline_keyboard_for_hello = [
    [
        {
            "text": "JavaScript",
            "callback_data": "JavaScript"
        },
        {
            "text": "Python",
            "callback_data": "Python"

        },
    ],
    [
        {
            "text": "Java, Scala",
            "callback_data": "Java, Scala"
        },
        {
            "text": "C/C++, Assembler",
            "callback_data": "C/C++, Assembler"
        }
    ],
    [
        {
            "text": "PHP",
            "callback_data": "PHP"
        },
        {
            "text": ".NET",
            "callback_data": ".NET"
        },
        {
            "text": "QA",
            "callback_data": "QA"
        }
    ],
    [
        {
            "text": "DevOps",
            "callback_data": "DevOps"
        },
        {
            "text": "IOS",
            "callback_data": "IOS"
        },
        {
            "text": "Golang",
            "callback_data": "Golang"
        }
    ],
    [
        {
            "text": "Data Science",
            "callback_data": "DS, Data Science"
        },
        {
            "text": "Security",
            "callback_data": "Security, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"
        },
    ],
    [
        {
            "text": "Analyst",
            "callback_data": "Analyst"
        },
        {
            "text": "Manager",
            "callback_data": "Manager"
        }
    ]

]


def generate_pagination_keyboard(url: str,
                                 extend_profile: bool,
                                 reveal_text: bool = True,
                                 ):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    :param extend_profile: ¬†–ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ—Ç
    :param reveal_text: –≤—ã–≤–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É  "–†–∞—Å–∫—Ä—ã—Ç—å" –∏–ª–∏ –Ω–µ—Ç
    :param url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
    :return:
    """
    inline_keyboard_for_pagination = [
        [
            back_to_selection(),
            next_item()
        ],
        [
            to_favor(),
            show_favor()
        ],
        [
            clean_history()
        ]

    ]

    if reveal_text:
        inline_keyboard_for_pagination.insert(0, get_reveal_button(url, extend_profile))
    return inline_keyboard_for_pagination


def generate_check_box_keyboard(url: str,
                                reveal_text: bool = True,
                                extend_profile: bool = False):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±–∞–Ω–Ω–æ–µ"
    :param extend_profile: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–µ—Ç
    :param reveal_text: –≤—ã–≤–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É  "–†–∞—Å–∫—Ä—ã—Ç—å" –∏–ª–∏ –Ω–µ—Ç
    :param url: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
    :return: –≥–æ—Ç–æ–≤—ã–µ –º–∞—Å—Å–∏–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    inline_keyboard_for_check_box = [
        [
            back_to_selection(),
            next_item()
        ],
        [
            add_item(),
            show_favor()
        ],
        [
            clean_history()
        ],
        [
            get_reveal_button(url)
        ]
    ]
    if reveal_text:
        inline_keyboard_for_check_box.insert(0, get_reveal_button(url, extend_profile))
    return inline_keyboard_for_check_box


def generate_emo_keyboard(url: str,
                          reveal_text: bool = True,
                          extend_profile: bool = False):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    :param extend_profile: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–µ—Ç
    :param reveal_text:
    :param url:
    :return:
    """
    inline_keyboard_for_emo = [
        [
            back_to_selection(),
            next_item()
        ],
        [
            add_item(double_click=True),
            show_favor(),
        ],
        [
            clean_history()
        ]
    ]

    if reveal_text:
        inline_keyboard_for_emo.insert(0, get_reveal_button(url, extend_profile))
    return inline_keyboard_for_emo


def generate_check_box_for_clean(url: str,
                                 double_click: bool = False,
                                 reveal_text: bool = True,
                                 extend_profile: bool = True):
    """
    –§—É–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–º–µ–Ω—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å"
    :param extend_profile: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–µ—Ç
    :param reveal_text:
    :param url:
    :param double_click:
    :return:
    """

    inline_keyboard_for_pagination = [
        [
            back_to_selection(),
            next_item()
        ],
        [
            to_favor(),
            show_favor()
        ],
        [
            click_to_clean_items(double_click=double_click)
        ]
    ]

    if reveal_text:
        inline_keyboard_for_pagination.insert(0, get_reveal_button(url, extend_profile))

    return inline_keyboard_for_pagination


def generate_keyboard_for_likes(url: str,
                                reveal_text: bool = True,
                                extend_profile: bool = False):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    :param extend_profile: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –Ω–µ—Ç
    :param reveal_text:
    :param url:
    :return:
    """

    inline_keyboard_for_likes = [
        [
            back_to_selection(),
            next_item()
        ]
    ]
    if reveal_text:
        inline_keyboard_for_likes.insert(0, get_reveal_button(url, extend_profile))
    return inline_keyboard_for_likes
